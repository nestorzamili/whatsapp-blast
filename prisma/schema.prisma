generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  name              String
  role              String
  isVerified        Boolean   @default(false)
  verificationToken String?
  verifyExpires     DateTime? @db.Timestamptz
  resetToken        String?
  resetTokenExpires DateTime? @db.Timestamptz
  clients           client[]
  quota             quota?
  createdAt         DateTime  @default(now()) @db.Timestamptz
  updatedAt         DateTime  @updatedAt @db.Timestamptz
}

model client {
  id             String       @id @default(uuid())
  userId         String
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session        String?
  status         ClientStatus @default(INITIALIZING)
  lastActive     DateTime?    @db.Timestamptz
  lastQrCode     String?
  whatsappNumber String?
  whatsappName   String?
  messages       message[]
  createdAt      DateTime     @default(now()) @db.Timestamptz
  updatedAt      DateTime     @updatedAt @db.Timestamptz
}

model message {
  id        String        @id @default(uuid())
  clientId  String
  client    client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  number    String
  content   String
  status    MessageStatus @default(PENDING)
  mediaUrl  String?
  error     String?
  createdAt DateTime      @default(now()) @db.Timestamptz
}

model quota {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance      Int           @default(0)
  lockedAmount Int           @default(0)
  transactions transaction[]
  createdAt    DateTime      @default(now()) @db.Timestamptz
  updatedAt    DateTime      @updatedAt @db.Timestamptz
}

model transaction {
  id          String            @id @default(uuid())
  quotaId     String
  quota       quota             @relation(fields: [quotaId], references: [id], onDelete: Cascade)
  orderId     String            @unique
  amount      Int // Total amount in IDR
  quotaAmount Int // Number of quota units
  status      TransactionStatus @default(PENDING)

  // Core Midtrans fields
  paymentType    String? // payment method: gopay, bank_transfer, qris, etc.
  midtransId     String? // Midtrans transaction_id
  midtransStatus String? // Raw transaction_status from Midtrans

  // Payment method specific details
  paymentDetails Json? // Store payment-specific details (VA numbers, QR info, etc)

  // Timestamps from Midtrans
  paymentTime    DateTime? @db.Timestamptz // When payment was initiated
  settlementTime DateTime? @db.Timestamptz // When payment was settled
  expiryTime     DateTime? @db.Timestamptz // Payment expiration time

  // Metadata
  statusCode  String? // Status code from Midtrans
  fraudStatus String? // Fraud assessment result

  // Debug information - can be cleaned up periodically
  rawNotification Json? // Complete notification data for debugging

  // Snap URLs and tokens
  snapToken       String? // Token for Snap JS integration
  snapRedirectUrl String? // Redirect URL for Snap

  // Important dates
  paidAt    DateTime? @db.Timestamptz // When payment was confirmed successful
  expiredAt DateTime? @db.Timestamptz // When transaction will expire
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz
}

enum ClientStatus {
  INITIALIZING
  CONNECTED
  DISCONNECTED
  LOGOUT
}

enum MessageStatus {
  PENDING
  SENT
  FAILED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
  CANCELED
}
